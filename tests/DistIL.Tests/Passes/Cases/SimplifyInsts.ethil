static Self::Use(#x: int) -> void {
BB_01:
    ret
}

static Self::CanocalizeCmpSwapOpers(#x: int, #y: int, #z: bool) -> void {
BB_01:
    r1 = cmp.eq 0, #x -> bool
    r2 = icmp.slt #x, #y -> bool
    r3 = cmp.ne #z, r2 -> bool
    ret
//CHECK: CanocalizeCmpSwapOpers
//CHECK: cmp.eq #x, 0
//CHECK: cmp.ne r2, #z
//CHECK: ret
}

static Self::CombineNestedCmpEq(#x: int, #y: int) -> void {
BB_01:
    r1 = icmp.slt #x, #y -> bool
    r2 = cmp.eq r1, 0 -> bool
    call Self::Use(int: r2)
    
    r3 = icmp.slt #x, #y -> bool
    r4 = cmp.ne r3, 0 -> bool
    call Self::Use(int: r4)
    
    r5 = icmp.slt #x, #y -> bool
    r6 = cmp.eq r5, 1 -> bool
    call Self::Use(int: r6)
    
    r7 = icmp.slt #x, #y -> bool
    r8 = cmp.ne r7, 1 -> bool
    call Self::Use(int: r8)
    
    r9  = icmp.slt #x, #y -> bool
    r10 = cmp.eq r9, 42 -> bool
    call Self::Use(int: r10)
    
    r11 = icmp.slt #x, #y -> bool
    r12 = cmp.ne r11, 42 -> bool
    call Self::Use(int: r12)
    
    ret
//CHECK:     CombineNestedCmpEq
//CHECK-NOT: cmp.eq
//CHECK-NOT: cmp.ne
//CHECK:     ret
}