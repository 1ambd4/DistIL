static Self::StrengthReduceArray_InBounds(#data: int[], #count: int) -> void {
BB_01:
  goto L_Header
L_Header:
  idx = phi [BB_01: 0], [L_Body: r18] -> int
  r14 = icmp.slt idx, #count -> bool
  goto r14 ? L_Body : L_Exit
L_Body:
  r18 = add idx, 1 -> int
  ptr = arraddr.inbounds #data, idx -> int&
  store ptr, r18
  goto L_Header
L_Exit:
  ret
//CHECK: StrengthReduceArray_InBounds
//CHECK: BB_01:
//CHECK: GetArrayDataReference
//CHECK-NOT: arraddr
//CHECK: ret
}

static Self::StrengthReduceSpan(#data: Span`1[float]) -> float {
$Locals:
  loc2: Span`1[float]
BB_01:
  store $loc2, #data
  goto L_Header
L_Body:
  r5 = call Span`1[!0]::get_Item(this: $loc2, int: r12) -> !0&
  r6 = load r5 -> float
  r7 = fadd r11, r6 -> float
  r8 = add r12, 1 -> int
  goto L_Header
L_Header:
  r11 = phi [BB_01: 0.0f], [L_Body: r7] -> float
  r12 = phi [BB_01: 0], [L_Body: r8] -> int
  r13 = call Span`1[!0]::get_Length(this: $loc2) -> int
  r14 = icmp.slt r12, r13 -> bool
  goto r14 ? L_Body : L_Exit
L_Exit:
  ret r11
//CHECK: StrengthReduceSpan
//CHECK-NOT: get_Item
//CHECK: ret
}

static Self::RemoveDuplicatedCounters(#buffer: int&, #count: int) -> void {
BB_01:
  goto L_Header
L_Header:
  idxA = phi [BB_01: 0], [L_Body: r18] -> int
  idxB = phi [BB_01: 0], [L_Body: r19] -> int
  idxC = phi [BB_01: 0], [L_Body: r20] -> int
  r14 = icmp.slt idxA, #count -> bool
  goto r14 ? L_Body : L_Exit
L_Body:
  r18 = add idxA, 1 -> int
  r19 = add idxB, 1 -> int
  ptr = lea #buffer + idxA * 4 -> int&
  store ptr, r19
  r20 = add idxC, 1 -> int
  goto L_Header
L_Exit:
  ret
//CHECK: RemoveDuplicatedCounters
//CHECK: L_Header:
//CHECK-NEXT: phi
//CHECK-NEXT: icmp.slt
//CHECK: ret
}